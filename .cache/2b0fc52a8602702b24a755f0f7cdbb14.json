{"dependencies":[],"generated":{"js":"/**\n * SvgPath\n * Chainable SVG path string generator with some sugar added\n * Supports Node, AMD and browser environments (EcmaScript 5+ or shims)\n * No dependencies\n * @version 0.2.1\n * @author Igor Zalutsky\n * @license MIT\n */\n(function (root, factory) {\n    if (typeof define === 'function' && define.amd) {\n        define([], factory);\n    } else if (typeof exports === 'object') {\n        module.exports = factory();\n    } else {\n        root.SvgPath = factory();\n    }\n}(this, function () {\n    \"use strict\";\n\n    var absCommands = ['M', 'Z', 'L', 'H', 'V', 'C', 'S', 'Q', 'T', 'A'];\n    var relCommands = absCommands.map(function(letter){\n        return letter.toLowerCase();\n    });\n    var commands = absCommands.concat(relCommands);\n\n    /**\n     * Creates a path builder. Can be invoked without new.\n     * @returns {SvgPath}\n     * @constructor\n     */\n    function SvgPath(){\n        //TODO is this check robust enough?\n        if (this instanceof SvgPath){\n            this.relative = false;\n            this.commands = [];\n        } else {\n            return new SvgPath();\n        }\n    }\n\n    /**\n     * Turns relative mode on (lowercase commands will be used)\n     * @returns {SvgPath}\n     */\n    SvgPath.prototype.rel = function(){\n        this.relative = true;\n        return this;\n    };\n\n    /**\n     * Turns relative mode off (uppercase commands will be used)\n     * @returns {SvgPath}\n     */\n    SvgPath.prototype.abs = function(){\n        this.relative = false;\n        return this;\n    };\n\n    /**\n     * Closes subpath (Z command)\n     * @returns {SvgPath}\n     */\n    SvgPath.prototype.close = function(){\n        return this.Z();\n    };\n\n    /**\n     * Moves pen (M or m command)\n     * Also accepts point, i.e. { x: 10, y: 20 }\n     * @param x\n     * @param y\n     * @returns {SvgPath}\n     */\n    SvgPath.prototype.to = function(x, y){\n        var point = (typeof x === 'object') ? x : { x: x, y: y };\n        return this._cmd('M')(point.x, point.y);\n    };\n\n    /**\n     * Draws line (L or l command)\n     * Also accepts point, i.e. { x: 10, y: 20 }\n     * @param x\n     * @param y\n     * @returns {SvgPath}\n     */\n    SvgPath.prototype.line = function(x, y){\n        var point = (typeof x === 'object') ? x : { x: x, y: y };\n        return this._cmd('L')(point.x, point.y);\n    };\n\n    /**\n     * Draws horizontal line (H or h command)\n     * @param x\n     * @returns {SvgPath}\n     */\n    SvgPath.prototype.hline = function(x){\n        return this._cmd('H')(x);\n    };\n\n    /**\n     * Draws vertical line (V or v command)\n     * @param y\n     * @returns {SvgPath}\n     */\n    SvgPath.prototype.vline = function(y){\n        return this._cmd('V')(y);\n    };\n\n    /**\n     * Draws cubic bezier curve (C or c command)\n     * Also accepts 2 or 3 points, i.e. { x: 10, y: 20 }\n     * If last point is omitted, acts like shortcut (S or s command)\n     * @param x1\n     * @param y1\n     * @param x2\n     * @param y2\n     * @param x\n     * @param y\n     * @returns {SvgPath}\n     */\n    SvgPath.prototype.bezier3 = function(x1, y1, x2, y2, x, y){\n        var usePoints = (typeof x1 === 'object');\n        var shortcut = usePoints ? arguments.length < 3 : arguments.length < 6;\n        var p1 = { x: x1, y: y1 };\n        var p2 = { x: x2, y: y2 };\n        var end = shortcut ? p2 : { x: x, y: y };\n        if (usePoints){\n            p1 = x1;\n            p2 = y1;\n            end = shortcut ? p2 : x2;\n        }\n        if (!shortcut) {\n            return this._cmd('C')(p1.x, p1.y, p2.x, p2.y, end.x, end.y);\n        } else {\n            return this._cmd('S')(p1.x, p1.y, end.x, end.y);\n        }\n    };\n\n    /**\n     * Draws quadratic bezier curve (Q or q command)\n     * Also accepts 1 or 2 points, i.e. { x: 10, y: 20 }\n     * If last point is omitted, acts like shortcut (T or t command)\n     * @param x1\n     * @param y1\n     * @param x\n     * @param y\n     * @returns {SvgPath}\n     */\n    SvgPath.prototype.bezier2 = function(x1, y1, x, y){\n        var usePoints = (typeof x1 === 'object');\n        var shortcut = usePoints ? arguments.length < 2 : arguments.length < 4;\n        var p1 = { x: x1, y: y1 };\n        var end = shortcut ? p1 : { x: x, y: y };\n        if (usePoints){\n            p1 = x1;\n            end = shortcut ? p1 : y1;\n        }\n        if (!shortcut) {\n            return this._cmd('Q')(p1.x, p1.y, end.x, end.y);\n        } else {\n            return this._cmd('T')(end.x, end.y);\n        }\n    };\n\n    /**\n     * Draws an arc (A or a command)\n     * Also accepts end point, i.e. { x: 10, y: 20 }\n     * @param rx\n     * @param ry\n     * @param rotation\n     * @param large\n     * @param sweep\n     * @param x\n     * @param y\n     * @returns {*}\n     */\n    SvgPath.prototype.arc = function(rx, ry, rotation, large, sweep, x, y){\n        var point = (typeof x === 'object') ? x : { x: x, y: y };\n        return this._cmd('A')(rx, ry, rotation, large, sweep, point.x, point.y);\n    };\n\n    /**\n     * String representation of command chain\n     * @returns {string}\n     */\n    SvgPath.prototype.str = function(){\n        return this.commands.map(function(command){\n            return command.toString();\n        }).join(' ');\n    };\n\n    //setting letter commands\n    commands.forEach(function(commandName){\n        SvgPath.prototype[commandName] = function(){\n            var args = Array.prototype.slice.call(arguments, 0);\n            args.unshift(commandName);\n            var command = new Command(args);\n            this.commands.push(command);\n            return this;\n        };\n    });\n\n    /**\n     * Gets either absolute (uppercase) or relative (lowercase) version of command depending on mode\n     * @param letter\n     * @returns {function}\n     * @private\n     */\n    SvgPath.prototype._cmd = function(letter){\n        var actualName = this.relative ?\n            letter.toLowerCase() : letter.toUpperCase();\n        //TODO maybe direct invokation is better than binding?\n        return this[actualName].bind(this);\n    };\n\n    /**\n     * Represents a single command\n     * @param name\n     * @constructor\n     */\n    function Command(name){\n        //TODO more robust array detection\n        var args = name.length > 0 && name.slice ?\n            name : Array.prototype.slice.call(arguments, 0);\n        this.name = args[0];\n        this.args = args.slice(1);\n    }\n\n    /**\n     * String representation of a command\n     * @returns {string}\n     */\n    Command.prototype.toString = function(){\n        return this.name + ' ' + this.args.join(' ');\n    };\n\n    return SvgPath;\n\n}));\n"},"hash":"c3d180d237a1e0cb77e0a15e619d7e86"}