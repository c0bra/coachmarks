{"dependencies":[],"generated":{"js":"\"use strict\";\n\nvar _getIterator2 = require(\"babel-runtime/core-js/get-iterator\");\n\nvar _getIterator3 = _interopRequireDefault(_getIterator2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction cache() {\n  return cache.addOrGet.apply(cache, arguments);\n}\n\ncache.init = function () {\n  if (!cache.cache) {\n    cache.cache = {};\n  }\n};\n\ncache.addOrGet = function (name, obj) {\n  cache.init();\n  if (typeof obj === 'undefined') {\n    // Get\n    return cache.get(name);\n  }\n\n  // Set\n  cache.add(name, obj);\n\n  return obj;\n};\n\ncache.get = function (name) {\n  cache.init();\n  return cache.cache[name];\n};\n\ncache.add = function (name, obj) {\n  cache.init();\n  cache.cache[name] = obj;\n  return obj;\n};\n\ncache.remove = function (name) {\n  cache.init();\n  if (name) cache.cache[name] = undefined;\n};\n\ncache.clear = function () {\n  cache.init();\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = (0, _getIterator3.default)(cache.cache), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var c = _step.value;\n\n      cache.cache[c] = undefined;\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n};\n\ncache.default = function (name, defaultFn) {\n  var obj = cache(name);\n\n  if (obj === undefined) return cache(name, defaultFn.call());\n  return obj;\n};\n\ncache.all = function () {\n  cache.init();\n  return cache.cache;\n};\n\ncache.allArray = function () {\n  cache.init();\n  var elms = [];\n  for (var key in cache) {\n    if (Object.prototype.hasOwnProperty.call(cache.cache, key)) {\n      elms.push({ key: cache.cache[key] });\n    }\n  }\n\n  return elms;\n};\n\nmodule.exports = cache;"},"hash":"d42c8ffbcba287ffaec0fb4ebbc3fd40"}